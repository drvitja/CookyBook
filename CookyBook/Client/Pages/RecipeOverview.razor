@page "/recipeoverview"

@using CookyBook.Shared
@using CookyBook.Shared.DataTransferObjects
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>CookyBook</PageTitle>


	@if (Recipes == null)
	{
		<p><em>Loading...</em></p>
	}

	else
	{
		<div class="wrapper">
			<div class="header">Recipes</div>

			<p></p>

		@if (!IsHidden)
		{
				<button Delete style="height:50px; width: 50px; margin:10px;" @onclick="DeleteRecipe">
					<span class="oi oi-trash"></span>
				</button>
				
		}
			<button Add onclick="location.href='save'" style="height:50px; width: 50px; margin: 10px;">
				<span class="oi oi-plus"></span>
			</button>


			<div class="cards_wrap">
				@foreach (var recipe in Recipes)
				{
					<div class="card_item">
						<div class="card_inner">
							<input class="recipe_checkbox" type="checkbox" @bind-value="@recipe.Selected" />
							<img src="@recipe.ImageUrl" />
							<div class="recipe_name">@recipe.Title</div>
						<div class="recipe_duration"><b>Duration: </b>@recipe.Duration</div>
						<div class="recipe_level"><b>Difficulty: </b>@recipe.Level</div>
							<div class="recipe_description"><b>Description: </b>@recipe.Description</div>
						</div>
					</div>
				}
			</div>
		</div>
	}


@code {
	private List<RecipeDto>? Recipes = new();

	public bool IsHidden => Recipes == null || Recipes.Count() == 0 ? true : false;

	protected override async Task OnInitializedAsync()
	{
		var response = await Http.GetFromJsonAsync<RecipeDto[]>("Recipe");
		Recipes = response?.ToList<RecipeDto>();
	}

	public async void DeleteRecipe()
	{
		List<RecipeDto> ItemsToDelete = new();
		ItemsToDelete = Recipes!.Where(x => x.Selected).ToList<RecipeDto>();
		foreach (var recipe in ItemsToDelete)
		{
			await Http.DeleteAsync($"Recipe/{recipe.Id}");
			Recipes!.Remove(recipe);
			this.StateHasChanged();
		}

	}
}