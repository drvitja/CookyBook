@page "/nutrientoverview"

@using CookyBook.Shared
@using CookyBook.Shared.DataTransferObjects
@inject HttpClient Http

<PageTitle>CookyBook</PageTitle>

@if (Nutrients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="wrapper">
        <div class="header">Nutrients</div>

        <p></p>

        @if (!IsHidden)
        {
            <button Delete style="height:50px; width: 50px; margin:10px;" @onclick="DeleteNutrient">
                <span class="oi oi-trash"></span>
            </button>

        }
        <button Add onclick="location.href='save'" style="height:50px; width: 50px; margin: 10px;">
            <span class="oi oi-plus"></span>
        </button>

    </div>

    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Title</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var nutrient in Nutrients)
            {
                <tr>
                    <td><input type="checkbox" @bind-value="@nutrient.Selected" /></td>
                    <td>@nutrient.Id</td>
                    <td>@nutrient.Title</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<NutrientDto>? Nutrients;

    public bool IsHidden => Nutrients == null || Nutrients.Count() == 0 ? true : false;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<NutrientDto[]?>("Nutrient");
        Nutrients = response?.ToList<NutrientDto>();
    }

    public async void DeleteNutrient()
    {
        List<NutrientDto> ItemsToDelete = new();
        ItemsToDelete = Nutrients!.Where(x => x.Selected).ToList<NutrientDto>();
        foreach (var nutrient in ItemsToDelete)
        {
            await Http.DeleteAsync($"Nutrient/{nutrient.Id}");
            Nutrients!.Remove(nutrient);
            this.StateHasChanged();
        }
    }



}
